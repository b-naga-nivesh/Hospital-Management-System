import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import javax.swing.JOptionPane;

public class EditAdminForm extends javax.swing.JFrame {
private String loggedInUsername;
    /**
     * Creates new form EditAdminForm
     */
    public EditAdminForm(String username) {
        this.loggedInUsername = username; 
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        EditComboBox = new javax.swing.JComboBox<>();
        updatedValueLabel = new javax.swing.JLabel();
        updatedValueTextField = new javax.swing.JTextField();
        updateButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        editLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        EditComboBox.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        EditComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Username", "Password" }));
        EditComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditComboBoxActionPerformed(evt);
            }
        });

        updatedValueLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        updatedValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        updatedValueLabel.setText("ENTER UPDATED VALUE");

        updatedValueTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatedValueTextFieldActionPerformed(evt);
            }
        });

        updateButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        updateButton.setText("UPDATE");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        cancelButton.setText("CANCEL");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        editLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        editLabel.setText("EDIT");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(cancelButton))
                    .addComponent(updatedValueLabel)
                    .addComponent(editLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updatedValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EditComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(93, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(editLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(EditComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(updatedValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(updatedValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateButton)
                    .addComponent(cancelButton))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void EditComboBoxActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    private void updatedValueTextFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        // TODO add your handling code here:
    }                                                     

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
        String url="jdbc:mysql://localhost/hospital";
        String user="root";
        String pwd= "Nivesh@1416";
        
        String column=EditComboBox.getSelectedItem().toString().toLowerCase();
        String updatedValue =updatedValueTextField.getText();
        
        
        // Validate input based on the selected column
        if (column.equals("username")) {
            if (!isValidUsername(updatedValue)) {
                JOptionPane.showMessageDialog(this, "Invalid username! Only alphabets are allowed.");
                return;
            }
        } else if (column.equals("password")) {
            if (!isValidPassword(updatedValue)) {
                JOptionPane.showMessageDialog(this, "Invalid password! It must contain letters, numbers, and special characters.");
                return;
            }
        }
        
        
       String query = "UPDATE users SET " + column + " = ? WHERE username = ?";

        try (Connection conn = DriverManager.getConnection(url, user, pwd);
             PreparedStatement pstmt = conn.prepareStatement(query)) {

            pstmt.setString(1, updatedValue); // Updated value (username/password)
            pstmt.setString(2, loggedInUsername); // Current logged-in username

            int rows = pstmt.executeUpdate();
            if (rows > 0) {
                JOptionPane.showMessageDialog(this, column + " updated successfully.");
                if (column.equals("username")) {
                    loggedInUsername = updatedValue; // Update current username
                }
            } else {
                JOptionPane.showMessageDialog(this, "Update failed. Ensure the user exists.");
            }
            updatedValueTextField.setText("");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }                                            

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
        this.dispose();
    }                                            

    // Validate username: only alphabets
    private boolean isValidUsername(String username) {
        return Pattern.matches("^[a-zA-Z]+$", username);
    }

    // Validate password: must include letters, numbers, and special characters
    private boolean isValidPassword(String password) {
        return Pattern.matches("^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[@#$%^&+=!]).{6,}$", password);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        String loggedInUsername = "current_user"; // Example logged-in username
        java.awt.EventQueue.invokeLater(() -> {
            new EditAdminForm(loggedInUsername).setVisible(true);
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JComboBox<String> EditComboBox;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel editLabel;
    private javax.swing.JButton updateButton;
    private javax.swing.JLabel updatedValueLabel;
    private javax.swing.JTextField updatedValueTextField;
    // End of variables declaration                   
}
